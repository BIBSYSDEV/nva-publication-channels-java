openapi: 3.0.3

info:
  title: NVA Publication Channel API
  description: >
    The NVA publication channel API. It provides transformed data from third party publication channel API.
  termsOfService: https://nva.unit.no/terms/
  contact:
    email: nva@unit.no
  license:
    name: MIT/NLOD 2.0
    url: https://link.to.license
  version: 1.0.0

externalDocs:
  description: Find out more about NVA
  url: https://nva.unit.no

servers:
  - url: https://api.sandbox.nva.aws.unit.no/publication-channels
  - url: https://api.dev.nva.aws.unit.no/publication-channels
  - url: https://api.test.nva.aws.unit.no/publication-channels
  - url: https://api.nva.unit.no/publication-channels

paths:
  /JournalResponse/{identifier}/{year}:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchJournalByIdentifierAndYearFunction.Arn}:live/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Journal
      summary: Fetch journal by identifier and year
      description: Returns a single Journal with information for a specific year
      operationId: FetchJournalByIdentifierAndYear
      parameters:
        - name: identifier
          in: path
          description: identifier of journal to return
          required: true
          schema:
            type: string
          example: '151f411d-68cd-4c7a-9cbb-daf00e0326ce'
        - name: year
          in: path
          description: year for journal data
          required: true
          schema:
            type: integer
            description: can maximum be set to next year
          example: '1910'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JournalResponse'
              examples:
                objectExample:
                  $ref: '#/components/examples/JournalResponseExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/JournalResponse'
              examples:
                objectExample:
                  $ref: '#/components/examples/JournalResponseExample'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        502:
          $ref: '#/components/responses/502'
  /JournalResponse:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchJournalByQueryFunction.Arn}:live/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Journal
      summary: Search for journal by pid, name or issn and year
      description: Returns a list of Journals
      operationId: SearchJournalByQuery
      parameters:
        - in: query
          name: year
          schema:
            type: integer
          description: The year you want the NVI for
          required: true
        - in: query
          name: query
          schema:
            type: string
          description: The query string, either a free-text, pid or issn
          required: true
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: The offset of the search for use in pagination. Must be divisible by the size.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: The size of each page of the search for use in pagination. Default is 10.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJournals'
              examples:
                objectExample:
                  $ref: '#/components/examples/PaginatedJournalsExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedJournals'
              examples:
                objectExample:
                  $ref: '#/components/examples/PaginatedJournalsExample'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        502:
          $ref: '#/components/responses/502'
    post:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateJournalFunction.Arn}:live/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Journal
      summary: Create journal
      description: Returns a Location with uri for the created Journal
      operationId: CreateJournal
      requestBody:
        content:
          'application/ld+json':
            schema:
              $ref: '#/components/schemas/CreateJournal'
            examples:
              objectExample:
                $ref: '#/components/examples/CreateJournalExample'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              schema:
                type: string
              description: A URI to the new resource
        400:
          $ref: '#/components/responses/400'
        502:
          $ref: '#/components/responses/502'
  /publisher/{identifier}/{year}:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchPublisherByIdentifierAndYearFunction.Arn}:live/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Publisher
      summary: Fetch publisher by identifier and year
      description: Returns a single Publisher with information for a specific year
      operationId: FetchPublisherByIdentifierAndYear
      parameters:
        - name: identifier
          in: path
          description: identifier of publisher to return
          required: true
          schema:
            type: string
          example: '151f411d-68cd-4c7a-9cbb-daf00e0326ce'
        - name: year
          in: path
          description: year for publisher data
          required: true
          schema:
            type: integer
            description: can maximum be set to next year
          example: '1910'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
              examples:
                objectExample:
                  $ref: '#/components/examples/PublisherExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Publisher'
              examples:
                objectExample:
                  $ref: '#/components/examples/PublisherExample'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        502:
          $ref: '#/components/responses/502'
  /publisher:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchPublisherByQueryFunction.Arn}:live/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Publisher
      summary: Search for publisher by pid, name or issn and year
      description: Returns a list of Publishers
      operationId: SearchPublisherByQuery
      parameters:
        - in: query
          name: year
          schema:
            type: integer
          description: The year you want the NVI for
          required: true
        - in: query
          name: query
          schema:
            type: string
          description: The query string, either a free-text, pid or issn
          required: true
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: The offset of the search for use in pagination. Must be divisible by the size.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: The size of each page of the search for use in pagination. Default is 10.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublishers'
              examples:
                objectExample:
                  $ref: '#/components/examples/PaginatedPublishersExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedPublishers'
              examples:
                objectExample:
                  $ref: '#/components/examples/PaginatedPublishersExample'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        502:
          $ref: '#/components/responses/502'
    post:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePublisherFunction.Arn}:live/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Publisher
      summary: Create publisher
      description: Returns a Location with uri for the created Publisher
      operationId: CreatePublisher
      requestBody:
        content:
          'application/ld+json':
            schema:
              $ref: '#/components/schemas/CreatePublisher'
            examples:
              objectExample:
                $ref: '#/components/examples/CreatePublisherExample'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              schema:
                type: string
              description: A URI to the new resource
        400:
          $ref: '#/components/responses/400'
        502:
          $ref: '#/components/responses/502'
  /series/{identifier}/{year}:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchSeriesByIdentifierAndYearFunction.Arn}:live/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Series
      summary: Fetch series by identifier and year
      description: Returns a single Series with information for a specific year
      operationId: FetchSeriesByIdentifierAndYear
      parameters:
        - name: identifier
          in: path
          description: identifier of series to return
          required: true
          schema:
            type: string
          example: '151f411d-68cd-4c7a-9cbb-daf00e0326ce'
        - name: year
          in: path
          description: year for series data
          required: true
          schema:
            type: integer
            description: can maximum be set to next year
          example: '1910'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Series'
              examples:
                objectExample:
                  $ref: '#/components/examples/SeriesExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Series'
              examples:
                objectExample:
                  $ref: '#/components/examples/SeriesExample'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        502:
          $ref: '#/components/responses/502'
  /series:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchSeriesByQueryFunction.Arn}:live/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Series
      summary: Search for series by pid, name or issn and year
      description: Returns a list of Series
      operationId: SearchSeriesByQuery
      parameters:
        - in: query
          name: year
          schema:
            type: integer
          description: The year you want the NVI for
          required: true
        - in: query
          name: query
          schema:
            type: string
          description: The query string, either a free-text, pid or issn
          required: true
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: The offset of the search for use in pagination. Must be divisible by the size.
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: The size of each page of the search for use in pagination. Default is 10.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSeries'
              examples:
                objectExample:
                  $ref: '#/components/examples/PaginatedSeriesExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedSeries'
              examples:
                objectExample:
                  $ref: '#/components/examples/PaginatedSeriesExample'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        422:
          $ref: '#/components/responses/422'
        502:
          $ref: '#/components/responses/502'
    post:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateSeriesFunction.Arn}:live/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Series
      summary: Create series
      description: Returns a Location with uri for the created Series
      operationId: CreateSeries
      requestBody:
        content:
          'application/ld+json':
            schema:
              $ref: '#/components/schemas/CreateSeries'
            examples:
              objectExample:
                $ref: '#/components/examples/CreateSeriesExample'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              schema:
                type: string
              description: A URI to the new resource
        400:
          $ref: '#/components/responses/400'
        502:
          $ref: '#/components/responses/502'

components:
  responses:
    400:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    404:
      description: Not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    422:
      description: Unprocessable Content
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    500:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    502:
      description: Bad Gateway
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'

  schemas:
    PaginatedJournals:
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        id:
          type: string
          description: The url to the journal search result
        totalHits:
          type: integer
        nextResults:
          type: string
          nullable: true
          description: The uri to the next page of results, if there is one
        previousResults:
          type: string
          nullable: true
          description: The uri to the previous page of results, if there is one
        hits:
          type: array
          items:
            $ref: '#/components/schemas/JournalResponse'
    JournalResponse:
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        type:
          type: string
          pattern: 'Journal'
          description: The type of the returned object, always Journal
        name:
          $ref: '#/components/schemas/Name'
        onlineIssn:
          type: string
          pattern: '^[0-9]{4}-[0-9]{4}$'
          description: The ISSN of the online edition of the Journal
        printIssn:
          type: string
          pattern: '^[0-9]{4}-[0-9]{4}$'
          nullable: true
          description: The ISSN of the print edition of the Journal
        scientificValue:
          $ref: '#/components/schemas/ScientificValue'
        sameAs:
          type: string
          nullable: true
    CreateJournal:
      type: object
      properties:
        name:
          type: string
          description: Name of the journal
        printIssn:
          type: string
          nullable: true
          description: The print publication ISSN
          pattern: ^[0-9]{4}-[0-9]{3}[0-9X]$
        onlineIssn:
          type: string
          nullable: true
          description: The electronic publication ISSN
          pattern: ^[0-9]{4}-[0-9]{3}[0-9X]$
        homepage:
          type: string
          format: uri
          nullable: true
    PaginatedPublishers:
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        id:
          type: string
          description: The url to the publisher search result
        totalHits:
          type: integer
        nextResults:
          type: string
          nullable: true
          description: The uri to the next page of results, if there is one
        previousResults:
          type: string
          nullable: true
          description: The uri to the previous page of results, if there is one
        hits:
          type: array
          items:
            $ref: '#/components/schemas/Publisher'
    Publisher:
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        type:
          type: string
          pattern: 'Publisher'
          description: The type of the returned object, always Publisher
        name:
          $ref: '#/components/schemas/Name'
        onlineIssn:
          type: string
          pattern: '^[0-9]{4}-[0-9]{4}$'
          description: The ISSN of the online edition of the Publisher
        printIssn:
          type: string
          pattern: '^[0-9]{4}-[0-9]{4}$'
          nullable: true
          description: The ISSN of the print edition of the Publisher
        scientificValue:
          $ref: '#/components/schemas/ScientificValue'
        sameAs:
          type: string
          nullable: true
    CreatePublisher:
      type: object
      properties:
        name:
          type: string
          description: Name of the publisher
        printIssn:
          type: string
          nullable: true
          description: The print publication ISSN
          pattern: ^[0-9]{4}-[0-9]{3}[0-9X]$
        onlineIssn:
          type: string
          nullable: true
          description: The electronic publication ISSN
          pattern: ^[0-9]{4}-[0-9]{3}[0-9X]$
        homepage:
          type: string
          format: uri
          nullable: true
          description: The url to the publisher
    PaginatedSeries:
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        id:
          type: string
          description: The url to the series search result
        totalHits:
          type: integer
        nextResults:
          type: string
          nullable: true
          description: The uri to the next page of results, if there is one
        previousResults:
          type: string
          nullable: true
          description: The uri to the previous page of results, if there is one
        hits:
          type: array
          items:
            $ref: '#/components/schemas/Series'
    Series:
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        type:
          type: string
          pattern: 'Series'
          description: The type of the returned object, always Series
        name:
          $ref: '#/components/schemas/Name'
        onlineIssn:
          type: string
          pattern: '^[0-9]{4}-[0-9]{4}$'
          description: The ISSN of the online edition of the Series
        printIssn:
          type: string
          pattern: '^[0-9]{4}-[0-9]{4}$'
          nullable: true
          description: The ISSN of the print edition of the Series
        scientificValue:
          $ref: '#/components/schemas/ScientificValue'
        sameAs:
          type: string
          nullable: true
    CreateSeries:
      type: object
      properties:
        name:
          type: string
          description: Name of the series
        printIssn:
          type: string
          nullable: true
          description: The print publication ISSN
          pattern: ^[0-9]{4}-[0-9]{3}[0-9X]$
        onlineIssn:
          type: string
          nullable: true
          description: The electronic publication ISSN
          pattern: ^[0-9]{4}-[0-9]{3}[0-9X]$
        homepage:
          type: string
          format: uri
          nullable: true
          description: The url to the series
    Context:
      type: string
      pattern: 'https:\/\/.*$'
      description: The JSON-LD context object for the data, which describes the object in the data and allows machine processing of the data at a semantic level
    Name:
      type: string
      description: The name of the publication channel
    ScientificValue:
      type: string
      enum: [ 'Unassigned', 'LevelZero', 'LevelOne', 'LevelTwo' ]
      description: The scientific value of the publication channel. Used in NVI score setting.
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank

  examples:
    PaginatedJournalsExample:
      value:
        '@context': 'https://example.org/context.json'
        id: 'https://example.org/JournalResponse?year=2023&query=nature&offset=10&size=1'
        totalHits: 22
        nextResults: 'https://example.org/JournalResponse?year=2023&query=nature&offset=11&size=1'
        previousResults: 'https://example.org/JournalResponse?year=2023&query=nature&offset=9&size=1'
        hits:
          - '@context': 'https://example.org/context.json'
            id: 'https://example.org/JournalResponse/151f411d-68cd-4c7a-9cbb-daf00e0326ce/2010'
            type: 'Journal'
            name: 'The journal of eternal fury'
            onlineIssn: '1234-1234'
            printIssn: '4321-4321'
            scientificValue: 'LEVEL_1'
            sameAs: 'https://kanalregister.hkdir.no/publiseringskanaler/KanalTidsskriftInfo?pid=151f411d-68cd-4c7a-9cbb-daf00e0326ce'
    JournalExample:
      value:
        '@context': 'https://example.org/context.json'
        id: 'https://example.org/JournalResponse/151f411d-68cd-4c7a-9cbb-daf00e0326ce/2010'
        type: 'Journal'
        name: 'The journal of eternal fury'
        onlineIssn: '1234-1234'
        printIssn: '4321-4321'
        scientificValue: 'LEVEL_1'
        sameAs: 'https://kanalregister.hkdir.no/publiseringskanaler/KanalTidsskriftInfo?pid=151f411d-68cd-4c7a-9cbb-daf00e0326ce'
      summary: A sample journal
    CreateJournalExample:
      value:
        name: 'The journal of eternal fury'
        onlineIssn: '1234-1234'
        printIssn: '4321-4321'
        homepage: 'https://JournalResponse-of-eternal.fury.no'
      summary: A sample create journal
    PaginatedPublishersExample:
      value:
        '@context': 'https://example.org/context.json'
        id: 'https://example.org/publisher?year=2023&query=nature&offset=10&size=1'
        totalHits: 22
        nextResults: 'https://example.org/publisher?year=2023&query=nature&offset=11&size=1'
        previousResults: 'https://example.org/publisher?year=2023&query=nature&offset=9&size=1'
        hits:
          - '@context': 'https://example.org/context.json'
            id: 'https://example.org/publisher/151f411d-68cd-4c7a-9cbb-daf00e0326ce/2010'
            type: 'Publisher'
            name: 'The publisher of eternal fury'
            onlineIssn: '1234-1234'
            printIssn: '4321-4321'
            scientificValue: 'LEVEL_1'
            sameAs: 'https://kanalregister.hkdir.no/publiseringskanaler/KanalTidsskriftInfo?pid=151f411d-68cd-4c7a-9cbb-daf00e0326ce'
    CreatePublisherExample:
      value:
        name: 'The publisher of eternal fury'
        onlineIssn: '1234-1234'
        printIssn: '4321-4321'
        homepage: 'https://publisher-of-eternal.fury.no'
      summary: A sample create publisher
    PublisherExample:
      value:
        id: 'https://example.org/publisher/151f411d-68cd-4c7a-9cbb-daf00e0326ce/2010'
        type: 'Publisher'
        name: 'The publisher of eternal fury'
        onlineIssn: '1234-1234'
        printIssn: '4321-4321'
        scientificValue: 'LEVEL_1'
        sameAs: 'https://kanalregister.hkdir.no/publiseringskanaler/KanalTidsskriftInfo?pid=151f411d-68cd-4c7a-9cbb-daf00e0326ce'
      summary: A sample publisher
    PaginatedSeriesExample:
      value:
        '@context': 'https://example.org/context.json'
        id: 'https://example.org/series?year=2023&query=nature&offset=10&size=1'
        totalHits: 22
        nextResults: 'https://example.org/series?year=2023&query=nature&offset=11&size=1'
        previousResults: 'https://example.org/series?year=2023&query=nature&offset=9&size=1'
        hits:
          - '@context': 'https://example.org/context.json'
            id: 'https://example.org/series/151f411d-68cd-4c7a-9cbb-daf00e0326ce/2010'
            type: 'Series'
            name: 'The series of eternal fury'
            onlineIssn: '1234-1234'
            printIssn: '4321-4321'
            scientificValue: 'LEVEL_1'
            sameAs: 'https://kanalregister.hkdir.no/publiseringskanaler/KanalTidsskriftInfo?pid=151f411d-68cd-4c7a-9cbb-daf00e0326ce'
    SeriesExample:
      value:
        id: 'https://example.org/series/151f411d-68cd-4c7a-9cbb-daf00e0326ce/2010'
        type: 'Series'
        name: 'The series of eternal fury'
        onlineIssn: '1234-1234'
        printIssn: '4321-4321'
        scientificValue: 'LEVEL_1'
        sameAs: 'https://kanalregister.hkdir.no/publiseringskanaler/KanalTidsskriftInfo?pid=151f411d-68cd-4c7a-9cbb-daf00e0326ce'
      summary: A sample series
    CreateSeriesExample:
      value:
        name: 'The series of eternal fury'
        onlineIssn: '1234-1234'
        printIssn: '4321-4321'
        homepage: 'https://series-of-eternal.fury.no'
      summary: A sample create series