openapi: 3.0.3

info:
  title: NVA Publication Channel API
  description: >
    The NVA publication channel API. It provides transformed data from third party publication channel API.
  termsOfService: https://nva.unit.no/terms/
  contact:
    email: nva@unit.no
  license:
    name: MIT/NLOD 2.0
    url: https://link.to.license
  version: 1.0.0

externalDocs:
  description: Find out more about NVA
  url: https://nva.unit.no

servers:
  - url: https://api.sandbox.nva.aws.unit.no/publication-channels
  - url: https://api.dev.nva.aws.unit.no/publication-channels
  - url: https://api.test.nva.aws.unit.no/publication-channels
  - url: https://api.nva.unit.no/publication-channels

paths:
  /journal/{identifier}/{year}:
    get:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchJournalByIdentifierAndYearFunction.Arn}/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Journal
      summary: Fetch journal by identifier and year
      description: Returns a single Journal with information for a specific year
      operationId: FetchJournalByIdentifierAndYear
      parameters:
        - name: identifier
          in: path
          description: identifier of journal to return
          required: true
          schema:
            type: string
          example: '151f411d-68cd-4c7a-9cbb-daf00e0326ce'
        - name: year
          in: path
          description: year for journal data
          required: true
          schema:
            type: integer
            minimum: 2004
            description: can maximum be set to next year
          example: '1910'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
              examples:
                objectExample:
                  $ref: '#/components/examples/JournalExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Journal'
              examples:
                objectExample:
                  $ref: '#/components/examples/JournalExample'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
        502:
          $ref: '#/components/responses/502'
  /journal:
    post:
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateJournalFunction.Arn}/invocations
        httpMethod: POST
        type: "AWS_PROXY"
      tags:
        - Journal
      summary: Create journal
      description: Returns a Location with uri for the created Journal
      operationId: CreateJournal
      requestBody:
        content:
          'application/ld+json':
            schema:
              $ref: '#/components/schemas/CreateJournal'
            examples:
              objectExample:
                $ref: '#/components/examples/CreateJournalExample'
      responses:
        201:
          description: successful operation
          headers:
            Location:
              schema:
                type: string
              description: A URI to the new resource
        400:
          $ref: '#/components/responses/400'
        502:
          $ref: '#/components/responses/502'

components:
  responses:
    400:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    404:
      description: Not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    500:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    502:
      description: Bad Gateway
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'

  schemas:
    Journal:
      type: object
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        type:
          type: string
          pattern: 'Journal'
          description: The type of the returned object, always Journal
        name:
          $ref: '#/components/schemas/Name'
        onlineIssn:
          type: string
          pattern: '^[0-9]{4}-[0-9]{4}$'
          description: The ISSN of the online edition of the Journal
        printIssn:
          type: string
          pattern: '^[0-9]{4}-[0-9]{4}$'
          nullable: true
          description: The ISSN of the print edition of the Journal
        scientificValue:
          $ref: '#/components/schemas/ScientificValue'
        sameAs:
          type: string
          nullable: true
    CreateJournal:
      type: object
      properties:
        name:
          type: string
          description: Name of the journal
        printIssn:
          type: string
          nullable: true
          description: The print publication ISSN
          pattern: ^[0-9]{4}-[0-9]{3}[0-9X]$
        onlineIssn:
          type: string
          nullable: true
          description: The electronic publication ISSN
          pattern: ^[0-9]{4}-[0-9]{3}[0-9X]$
        homepage:
          type: string
          format: uri
          nullable: true
          description: The url to the journal
    Context:
      type: string
      pattern: 'https:\/\/.*$'
      description: The JSON-LD context object for the data, which describes the object in the data and allows machine processing of the data at a semantic level
    Name:
      type: string
      description: The name of the publication channel
    ScientificValue:
      type: string
      enum: [ 'Unassigned', 'LevelZero', 'LevelOne', 'LevelTwo' ]
      description: The scientific value of the publication channel. Used in NVI score setting.
    Problem:
      type: object
      properties:
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
        status:
          type: integer
          format: int32
          description: The HTTP status code associated with the problem
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        instance:
          type: string
          description: The requested path associated with the error


  examples:
    JournalExample:
      value:
        '@context': 'https://example.org/context.json'
        id: 'https://example.org/journal/151f411d-68cd-4c7a-9cbb-daf00e0326ce/2010'
        type: 'Journal'
        name: 'The journal of eternal fury'
        onlineIssn: '1234-1234'
        printIssn: '4321-4321'
        scientificValue: 'LEVEL_1'
        sameAs: 'https://kanalregister.hkdir.no/publiseringskanaler/KanalTidsskriftInfo?pid=151f411d-68cd-4c7a-9cbb-daf00e0326ce'
      summary: A sample journal
    CreateJournalExample:
      value:
        name: 'The journal of eternal fury'
        onlineIssn: '1234-1234'
        printIssn: '4321-4321'
        homepage: 'https://journal-of-eternal.fury.no'
      summary: A sample create journal

